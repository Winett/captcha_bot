import logging
from aiogram import Bot, Dispatcher, executor, types
import sqlite3
from generator_captcha import generate_captcha, delete_captcha
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import requests
import os

bot = Bot(token="5284050419:AAH49YF_kQutdx5XwPga7RY5its439ejH4M")
dp = Dispatcher(bot)
keyboardanswer = ReplyKeyboardMarkup(resize_keyboard=True)
stat = KeyboardButton(text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä")
solv_captch = KeyboardButton(text='–†–µ—à–∏—Ç—å –∫–∞–ø—á—Éüö®')
withdraw = KeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞üí∞')
keyboardanswer.add(stat, solv_captch)
keyboardanswer.add(withdraw)
stop_solv_captcha = ReplyKeyboardMarkup(resize_keyboard=True)
stop = KeyboardButton(text='–ü–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–µ—à–∞—Ç—å –∫–∞–ø—á—Éüõë')
stop_solv_captcha.add(stop)

try:
    os.mkdir('captchas')
except: pass
# qiwi_token = '4734c73d355626adc01a3afc5c7e3172'
#
# def get_profile(api_access_token):
#     s7 = requests.Session()
#     s7.headers['Accept']= 'application/json'
#     s7.headers['authorization'] = 'Bearer ' + api_access_token
#     p = s7.get('https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true&userInfoEnabled=true')
#     return p.json()
#
# print(get_profile(qiwi_token))
con = sqlite3.connect('db.db')
c = con.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS users (
    user        INTEGER,
    balance     REAL DEFAULT (0),
    correct      INTERGER DEFAULT (0),
    incorrect   INTEGER DEFAULT (0),
    answer  TEXT 
    );
""")


@dp.message_handler(commands="start")
async def helloing(msg: types.Message):
    id_user = msg.from_user.id
    try:
        c = con.cursor()
        c.execute(f'SELECT balance FROM users where user = {id_user}')
        if c.fetchone() is None:
            '''
            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ
            '''
            await msg.reply(
                f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –î—Ä—É–∑—å—è! –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, —Ä–µ—à–∞—è –∫–∞–ø—á—É! –£–¥–∞—á–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /solve')
            c.execute(f'INSERT INTO users VALUES({id_user}, 0.0, 0, 0, "none")')
            con.commit()

        c.execute(f'SELECT balance, correct, incorrect FROM users where user = {id_user}')
        balance, correct, incorrect = c.fetchone()
        balance = round(balance, 3)
        await msg.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n–í–µ—Ä–Ω—ã–µ –∫–∞–ø—á–∏: {correct}\n –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–∞–ø—á–∏: {incorrect}', reply_markup=keyboardanswer)
    except Exception as e:
        print(e)


@dp.message_handler(commands="withdraw")
async def withdraw(msg: types.Message):
     id_user = msg.from_user.id
     await msg.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 10‚ÇΩ, Qiwi\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–±–µ–∑ +): ')




@dp.message_handler(commands="solve")
async def solving(msg: types.Message):
    id_user = msg.from_user.id
    capt, captcha_text = generate_captcha()
    c = con.cursor()
    c.execute(f'UPDATE users SET answer = "{captcha_text.lower()}" where user = {id_user}')
    con.commit()
    await bot.send_photo(chat_id=id_user, photo=open(capt, 'rb'))
    delete_captcha(capt)



@dp.message_handler(content_types = ['text'])
async def text(msg: types.Message):
    id_user = msg.from_user.id
    if len(msg.text) == 4:
        c = con.cursor()
        c.execute(f'SELECT answer, correct, incorrect FROM users where user = {id_user}')
        answer, correct, incorrect = c.fetchone()
        if msg.text.lower() == answer:
            c.execute(f'SELECT balance, correct FROM users where user = {id_user}')
            balance, correct = c.fetchone()
            balance += 0.005
            correct += 1
            c.execute(f'UPDATE users SET balance = {balance}, correct = {correct} where user = {id_user}')
            con.commit()
            await msg.reply('–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –≤–µ—Ä–Ω–æ —Ä–µ—à–∏–ª –∫–∞–ø—á—É!\n–¢–≤–æ—è –Ω–∞–≥—Ä–∞–¥–∞ 0.005‚ÇΩ', reply_markup=stop_solv_captcha)
        else:
            incorrect += 1
            await msg.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!', reply_markup=stop_solv_captcha)
            c.execute(f'UPDATE users SET incorrect = {incorrect} where user = {id_user}')
        await solving(msg)

    if msg.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä':
        await helloing(msg)
    elif msg.text == '–†–µ—à–∏—Ç—å –∫–∞–ø—á—Éüö®':
        await solving(msg)
    elif msg.text == '–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞üí∞':
        await withdraw(msg)
    elif msg.text.isdigit():
        c = con.cursor()
        c.execute(f'SELECT balance, correct FROM users where user = {id_user}')
        balance, correct = c.fetchone()
        if balance < 10:
            await msg.answer('–í—ã –µ—â—ë –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞')
        else:
            pass
    elif msg.text == '–ü–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–µ—à–∞—Ç—å –∫–∞–ø—á—Éüõë':
        await helloing(msg)







if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)